/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package examinationmonitoringsystem;

import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rohit Kesarwani
 */
public class ViewResult extends javax.swing.JFrame {

    /**
     * Creates new form ViewResult
     */
    public ViewResult() {
        initComponents();
    }
 private void addDocumentListener() {
    documentListener = new DocumentListener() {
        public void changedUpdate(DocumentEvent documentEvent) {
            search();
        }

        public void insertUpdate(DocumentEvent documentEvent) {
            search();
        }

        public void removeUpdate(DocumentEvent documentEvent) {
            search();
        }

        private void search() {
            searchTableContents(ssname.getText().toUpperCase().trim());
        }
    };
    
}
    public void searchTableContents(String searchString) {
    DefaultTableModel currtableModel = (DefaultTableModel) rtable.getModel();
    //To empty the table before search
    currtableModel.setRowCount(0);
    //To search for contents from original table content
    for (Object rows : originalTableModel) {
        Vector rowVector = (Vector) rows;
        for (Object column : rowVector) {
            if (column.toString().contains(searchString)) {
                //content found so adding to table
                 System.out.println(rowVector.get(1).toString());
       
                currtableModel.addRow(rowVector);
                break;
            }
        }

    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        vcourse = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        vsession = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        vdsem = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        vsub = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        rtable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ssname = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(200, 50, 0, 0));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 204));
        jLabel3.setText("Course");

        vcourse.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        vcourse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "B.Tech", "M.Tech", "B.C.A.", "M.C.A.", "P.G.D.C.A." }));
        vcourse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                vcourseItemStateChanged(evt);
            }
        });
        vcourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vcourseActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 204));
        jLabel4.setText("Session");

        vsession.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        vsession.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "2015-16", "2016-17", "2017-18", "2018-19", "2019-20", "2020-21", "2021-22", "2022-23", "2023-24", "2024-25", "2025-26" }));
        vsession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vsessionActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 204));
        jLabel1.setText("                 View Result");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 204));
        jLabel5.setText("Semester");

        vdsem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-------------" }));
        vdsem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                vdsemItemStateChanged(evt);
            }
        });
        vdsem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vdsemActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 204));
        jLabel9.setText("Subject");

        vsub.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-------------" }));
        vsub.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                vsubItemStateChanged(evt);
            }
        });
        vsub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vsubActionPerformed(evt);
            }
        });

        rtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Roll No", "Name", "Father's Name", "Percentage", "Right Answer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(rtable);

        jButton1.setText("Print Record");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Seach");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 153, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(vsession, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(vdsem, 0, 161, Short.MAX_VALUE)
                                        .addComponent(vsub, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(vcourse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addComponent(ssname, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vsession, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(vcourse, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vdsem, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vsub, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(ssname, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(111, 111, 111))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vcourseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_vcourseItemStateChanged
        vdsem.removeAllItems();
        vdsem.addItem("select");
        if(vcourse.getSelectedIndex()==1)

        {
            vdsem.addItem("1");vdsem.addItem("2");vdsem.addItem("3");vdsem.addItem("4");vdsem.addItem("5");vdsem.addItem("6");vdsem.addItem("7");vdsem.addItem("8");

        }
        else if(vcourse.getSelectedIndex()==2)
        {
            vdsem.addItem("1");vdsem.addItem("2");vdsem.addItem("3");vdsem.addItem("4");
        }
        else if(vcourse.getSelectedIndex()==3)
        {
            vdsem.addItem("1");vdsem.addItem("2");vdsem.addItem("3");vdsem.addItem("4");vdsem.addItem("5");vdsem.addItem("6");
        }
        else if(vcourse.getSelectedIndex()==4)
        {
            vdsem.addItem("1");vdsem.addItem("2");vdsem.addItem("3");vdsem.addItem("4");
        }
        else if(vcourse.getSelectedIndex()==5)
        {
            vdsem.addItem("1");vdsem.addItem("2");
        }
    }//GEN-LAST:event_vcourseItemStateChanged

    private void vcourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vcourseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vcourseActionPerformed

    private void vsessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vsessionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vsessionActionPerformed

    private void vdsemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vdsemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vdsemActionPerformed

    private void vdsemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_vdsemItemStateChanged
if(vcourse.getSelectedIndex()!=0&&vsession.getSelectedIndex()!=0&&vdsem.getSelectedIndex()!=0)
{
    vsub.removeAllItems();
    vsub.addItem("Select Subject");
    try
    {
    Statement s=dh.connect();
    ResultSet r=s.executeQuery("select subject from qdetails where course='"+vcourse.getSelectedItem().toString()+"' and syear='"+vsession.getSelectedItem().toString()+"' and sem='"+vdsem.getSelectedItem().toString()+"'");
    while(r.next())
    {
        vsub.addItem(r.getString(1));
    }
    }catch(Exception e){
        System.out.println(e.getMessage());}
}

    }//GEN-LAST:event_vdsemItemStateChanged

    private void vsubItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_vsubItemStateChanged


    }//GEN-LAST:event_vsubItemStateChanged

    private void vsubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vsubActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vsubActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

if(vsub.getSelectedIndex()!=0)
{
    ArrayList<String> list=new ArrayList<>();
    while(rtable.getRowCount()>0)
    {
                        ((DefaultTableModel)rtable.getModel()).removeRow(0);
                      
    }
    try
    {       
        Statement s=dh.connect();
        ResultSet rs=s.executeQuery("select password from qdetails where course='"+vcourse.getSelectedItem().toString()+"' and syear='"+vsession.getSelectedItem().toString()+"' and sem='"+vdsem.getSelectedItem().toString()+"' and subject='"+vsub.getSelectedItem().toString()+"'");
        rs.next();
        String pass=rs.getString(1);
        System.out.println("password is "+pass);
        ResultSet k=s.executeQuery("select count(*) from studresult"+pass+"");
        k.next();
        System.out.println("count is"+k.getString(1));
        int i=0;
        ResultSet r=s.executeQuery("select uroll from studresult"+pass+"");
        while(r.next())
        {
            list.add(r.getString(1));
        }
        System.out.println("size of list is"+list.size());
        ResultSet rk;
        while(i<list.size())
        {
                    
                    ((DefaultTableModel)rtable.getModel()).addRow(new Object[]{});
                    System.out.println("row added");
                       ((DefaultTableModel)rtable.getModel()).setValueAt(list.get(i).toString(),i,0);
                   
                       rk=s.executeQuery("select name,fname from s_registration where uroll='"+list.get(i).toString()+"'");
                    rk.next();
                    
                       
                     ((DefaultTableModel)rtable.getModel()).setValueAt(rk.getString(1),i,1);
                      ((DefaultTableModel)rtable.getModel()).setValueAt(rk.getString(2),i,2);
                      rk.close();
                      rk=s.executeQuery("select per,trans from studresult"+pass+" where uroll='"+list.get(i)+"'");
                      rk.next();
                       ((DefaultTableModel)rtable.getModel()).setValueAt(rk.getString(1),i,3); 
                       ((DefaultTableModel)rtable.getModel()).setValueAt(rk.getString(2),i,4); 
                    i++;
        }
    
   
    }catch(Exception e){
        System.out.println(e.getMessage());}
     dh.disconnect();
               originalTableModel = (Vector) ((DefaultTableModel) rtable.getModel()).getDataVector().clone();
    //add document listener to jtextfield to search contents as soon as something typed on it
    addDocumentListener();
    ssname.getDocument().addDocumentListener(documentListener);

}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed


if(rtable.getRowCount()>0)
{
    try
    {
    rtable.print();
    }catch(Exception e){}
}
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable rtable;
    private javax.swing.JTextField ssname;
    private javax.swing.JComboBox vcourse;
    private javax.swing.JComboBox vdsem;
    private javax.swing.JComboBox vsession;
    private javax.swing.JComboBox vsub;
    // End of variables declaration//GEN-END:variables
DatabaseHelper dh=new DatabaseHelper();
  Vector originalTableModel;
DocumentListener documentListener;
  
}
